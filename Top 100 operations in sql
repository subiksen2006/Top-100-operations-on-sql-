-- Step 1: Create Database
CREATE DATABASE ecommerce;

-- Use the created database
USE ecommerce;

-- Step 2: Create Tables

-- Create Products Table
CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    description TEXT,
    price DECIMAL(10, 2),
    category VARCHAR(50)
);

-- Create Customers Table
CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(15),
    address TEXT
);

-- Create Orders Table
CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Create Order Items Table (many-to-many relation between orders and products)
CREATE TABLE order_items (
    order_item_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Step 3: Insert Data

-- Inserting Products
INSERT INTO products (name, description, price, category) 
VALUES 
('Laptop', '15-inch screen, 8GB RAM, 512GB SSD', 800.00, 'Electronics'),
('Phone', '6-inch screen, 128GB storage', 500.00, 'Electronics'),
('Headphones', 'Noise-cancelling, wireless', 100.00, 'Accessories'),
('Shoes', 'Comfortable running shoes', 75.00, 'Footwear');

-- Inserting Customers
INSERT INTO customers (name, email, phone, address)
VALUES 
('John Doe', 'john.doe@example.com', '123-456-7890', '123 Main St'),
('Jane Smith', 'jane.smith@example.com', '987-654-3210', '456 Oak St'),
('Alice Johnson', 'alice.johnson@example.com', '555-123-4567', '789 Pine St');

-- Inserting Orders
INSERT INTO orders (customer_id, order_date, total)
VALUES
(1, '2023-10-01', 900.00),
(2, '2023-10-02', 575.00);

-- Inserting Order Items
INSERT INTO order_items (order_id, product_id, quantity, price)
VALUES
(1, 1, 1, 800.00),
(1, 3, 1, 100.00),
(2, 2, 1, 500.00),
(2, 4, 1, 75.00);

-- Step 4: SQL Operations (100 Operations)

-- 1. Select all products
SELECT * FROM products;

-- 2. Select specific columns
SELECT name, price FROM products;

-- 3. Select products where price is greater than 100
SELECT * FROM products WHERE price > 100;

-- 4. Select products with a specific category
SELECT * FROM products WHERE category = 'Electronics';

-- 5. Select products with price between 100 and 500
SELECT * FROM products WHERE price BETWEEN 100 AND 500;

-- 6. Select customers whose name starts with 'J'
SELECT * FROM customers WHERE name LIKE 'J%';

-- 7. Count number of products
SELECT COUNT(*) FROM products;

-- 8. Count the number of customers
SELECT COUNT(*) FROM customers;

-- 9. Find the total price of all products
SELECT SUM(price) FROM products;

-- 10. Find the average price of all products
SELECT AVG(price) FROM products;

-- 11. Select customers with email containing 'example.com'
SELECT * FROM customers WHERE email LIKE '%example.com%';

-- 12. Select orders placed after a specific date
SELECT * FROM orders WHERE order_date > '2023-10-01';

-- 13. Join orders and customers to display order details with customer names
SELECT orders.order_id, customers.name, orders.total 
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id;

-- 14. Join order_items and products to display order items with product details
SELECT order_items.order_id, products.name, order_items.quantity, order_items.price 
FROM order_items
JOIN products ON order_items.product_id = products.product_id;

-- 15. Get total price for each order (including product price and quantity)
SELECT orders.order_id, SUM(order_items.price * order_items.quantity) AS total_order_price
FROM orders
JOIN order_items ON orders.order_id = order_items.order_id
GROUP BY orders.order_id;

-- 16. Find customers who have placed orders
SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id;

-- 17. Get the most expensive product
SELECT * FROM products ORDER BY price DESC LIMIT 1;

-- 18. Get the least expensive product
SELECT * FROM products ORDER BY price ASC LIMIT 1;

-- 19. Update product price
UPDATE products SET price = 850.00 WHERE product_id = 1;

-- 20. Delete a product from the products table
DELETE FROM products WHERE product_id = 4;

-- 21. Find orders where total is greater than 500
SELECT * FROM orders WHERE total > 500;

-- 22. Select all products from 'Footwear' category
SELECT * FROM products WHERE category = 'Footwear';

-- 23. Select all customers with 'St' in their address
SELECT * FROM customers WHERE address LIKE '%St%';

-- 24. Group orders by customer and get the total spent per customer
SELECT customers.name, SUM(orders.total) AS total_spent
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;

-- 25. Use NOT LIKE to find customers whose names don't start with 'J'
SELECT * FROM customers WHERE name NOT LIKE 'J%';

-- 26. Find customers whose phone starts with '123'
SELECT * FROM customers WHERE phone LIKE '123%';

-- 27. Get total order amount per order using aggregate function
SELECT order_id, SUM(price * quantity) AS total FROM order_items GROUP BY order_id;

-- 28. Find orders with no products (if any)
SELECT * FROM orders WHERE order_id NOT IN (SELECT order_id FROM order_items);

-- 29. Find the customer with the highest order total
SELECT customers.name, MAX(orders.total) 
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customers.customer_id;

-- 30. Find the customer with the least order total
SELECT customers.name, MIN(orders.total) 
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customers.customer_id;

-- 31. Update order total based on quantity and price
UPDATE orders 
SET total = (SELECT SUM(price * quantity) FROM order_items WHERE order_items.order_id = orders.order_id)
WHERE order_id = 1;

-- 32. Select all products in a specific price range
SELECT * FROM products WHERE price > 50 AND price < 500;

-- 33. Use OR to find products in 'Electronics' or 'Footwear'
SELECT * FROM products WHERE category = 'Electronics' OR category = 'Footwear';

-- 34. Insert a new customer
INSERT INTO customers (name, email, phone, address) VALUES ('Bob Brown', 'bob.brown@example.com', '111-222-3333', '101 Maple St');

-- 35. Find all customers who have not placed any orders
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);

-- 36. Join all four tables and get a complete order summary
SELECT customers.name, orders.order_id, products.name, order_items.quantity, order_items.price
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id
JOIN products ON order_items.product_id = products.product_id;

-- 37. Find the most recent order for each customer
SELECT customers.name, orders.order_id, orders.order_date 
FROM orders
JOIN customers ON orders.customer_id = customers.customer_id
WHERE orders.order_date = (SELECT MAX(order_date) FROM orders WHERE customer_id = customers.customer_id);

-- 38. Select customers who have purchased a specific product
SELECT customers.name
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id
WHERE order_items.product_id = 2;

-- 39. Create an index on products for quick search by category
CREATE INDEX idx_category ON products (category);

-- 40. Drop an index on products
DROP INDEX idx_category ON products;

-- 41. Select products sorted by name
SELECT * FROM products ORDER BY name;

-- 42. Select customers ordered by the number of orders (descending)
SELECT customers.name, COUNT(orders.order_id) AS order_count 
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id
ORDER BY order_count DESC;

-- 43. Check for duplicate customers based on email
SELECT email, COUNT(*) FROM customers GROUP BY email HAVING COUNT(*) > 1;

-- 44. Select the first 2 orders
SELECT * FROM orders LIMIT 2;

-- 45. Select orders with more than 1 product
SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(product_id) > 1;

-- -- 46. Find customers who have made an order in the past week
SELECT * FROM customers 
WHERE customer_id IN (
    SELECT customer_id FROM orders 
    WHERE order_date >= CURDATE() - INTERVAL 7 DAY
);

-- 47. Select products with 'head' in their name (case insensitive)
SELECT * FROM products WHERE LOWER(name) LIKE '%head%';

-- 48. Find orders placed before a specific date
SELECT * FROM orders WHERE order_date < '2023-09-01';

-- 49. Get the total number of products in each order
SELECT order_id, COUNT(*) AS total_products FROM order_items GROUP BY order_id;

-- 50. Select customers who ordered a specific product (e.g., Product ID 1)
SELECT customers.name 
FROM customers 
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id 
WHERE order_items.product_id = 1;

-- 51. Select all orders with their total value (including product price * quantity)
SELECT orders.order_id, SUM(order_items.price * order_items.quantity) AS total_value 
FROM orders
JOIN order_items ON orders.order_id = order_items.order_id
GROUP BY orders.order_id;

-- 52. Use LEFT JOIN to get all customers and their orders (even if they have no orders)
SELECT customers.name, orders.order_id 
FROM customers 
LEFT JOIN orders ON customers.customer_id = orders.customer_id;

-- 53. Update multiple columns in a table
UPDATE products SET price = 950.00, category = 'Gadgets' WHERE product_id = 1;

-- 54. Delete a customer from the customers table
DELETE FROM customers WHERE customer_id = 3;

-- 55. Add a new column to the orders table
ALTER TABLE orders ADD COLUMN shipping_address TEXT;

-- 56. Remove a column from the products table
ALTER TABLE products DROP COLUMN description;

-- 57. Add a new product to the products table
INSERT INTO products (name, description, price, category) 
VALUES ('Smartwatch', 'Waterproof smartwatch', 200.00, 'Electronics');

-- 58. Modify a column's data type in the products table
ALTER TABLE products MODIFY price DECIMAL(12, 2);

-- 59. Create a view to display customer order summary
CREATE VIEW customer_order_summary AS 
SELECT customers.name, orders.order_id, orders.order_date, orders.total 
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id;

-- 60. Query the created view
SELECT * FROM customer_order_summary;

-- 61. Create a trigger to update order total when order items are inserted
DELIMITER //
CREATE TRIGGER update_order_total AFTER INSERT ON order_items
FOR EACH ROW 
BEGIN
    UPDATE orders 
    SET total = (SELECT SUM(price * quantity) FROM order_items WHERE order_id = NEW.order_id)
    WHERE order_id = NEW.order_id;
END;
//
DELIMITER ;

-- 62. Drop the trigger created in the previous operation
DROP TRIGGER update_order_total;

-- 63. Find the highest quantity purchased in a single order
SELECT MAX(quantity) AS max_quantity FROM order_items;

-- 64. Get the product with the highest total sales
SELECT products.name, SUM(order_items.price * order_items.quantity) AS total_sales 
FROM order_items
JOIN products ON order_items.product_id = products.product_id
GROUP BY products.product_id
ORDER BY total_sales DESC LIMIT 1;

-- 65. Find the most recent order for each customer
SELECT customers.name, MAX(orders.order_date) AS last_order_date
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;

-- 66. Get customers who have purchased more than 3 products
SELECT customers.name
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id
GROUP BY customers.customer_id
HAVING COUNT(order_items.product_id) > 3;

-- 67. Find orders with a total between 100 and 500
SELECT * FROM orders WHERE total BETWEEN 100 AND 500;

-- 68. Find the customers who ordered the highest-priced product
SELECT customers.name 
FROM customers 
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id
WHERE order_items.product_id = (SELECT product_id FROM products ORDER BY price DESC LIMIT 1);

-- 69. Select customers and count their orders
SELECT customers.name, COUNT(orders.order_id) AS number_of_orders 
FROM customers 
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;

-- 70. Query with UNION to combine two queries
SELECT name FROM customers WHERE name LIKE 'J%' 
UNION 
SELECT name FROM products WHERE name LIKE 'S%';

-- 71. Query with INTERSECT to find common names between customers and products
-- (Note: INTERSECT is not supported in all SQL dialects like MySQL but works in SQL Server or PostgreSQL)
SELECT name FROM customers
INTERSECT
SELECT name FROM products;

-- 72. Query with EXCEPT to find names in customers not in products
-- (EXCEPT is supported in SQL Server or PostgreSQL)
SELECT name FROM customers
EXCEPT
SELECT name FROM products;

-- 73. Add a unique constraint to the products' name column
ALTER TABLE products ADD CONSTRAINT unique_product_name UNIQUE (name);

-- 74. Add a foreign key constraint to the orders table
ALTER TABLE orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES customers(customer_id);

-- 75. Check if the order contains any null product_id
SELECT * FROM order_items WHERE product_id IS NULL;

-- 76. Check for products with price greater than average
SELECT * FROM products WHERE price > (SELECT AVG(price) FROM products);

-- 77. Calculate the difference between the highest and lowest price in the products table
SELECT MAX(price) - MIN(price) AS price_diff FROM products;

-- 78. Find all products where description is NULL
SELECT * FROM products WHERE description IS NULL;

-- 79. Update product details based on multiple conditions
UPDATE products 
SET price = 250.00 
WHERE category = 'Electronics' AND price < 300;

-- 80. Find customers who made an order and have the same address
SELECT customers.name
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id
HAVING COUNT(DISTINCT customers.address) = 1;

-- 81. Find the first and last order of each customer
SELECT customers.name, 
       MIN(orders.order_date) AS first_order, 
       MAX(orders.order_date) AS last_order
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;

-- 82. Use a subquery to find customers who have purchased more than the average
SELECT * FROM customers 
WHERE customer_id IN (
    SELECT customer_id 
    FROM orders 
    WHERE total > (SELECT AVG(total) FROM orders)
);

-- 83. Combine orders and customers using RIGHT JOIN to include all orders
SELECT orders.order_id, customers.name 
FROM orders
RIGHT JOIN customers ON orders.customer_id = customers.customer_id;

-- 84. Find products that are in 'Accessories' or 'Electronics' categories
SELECT * FROM products WHERE category IN ('Accessories', 'Electronics');

-- 85. Delete products based on category
DELETE FROM products WHERE category = 'Footwear';

-- 86. Check for invalid email addresses (i.e., missing '@')
SELECT * FROM customers WHERE email NOT LIKE '%@%';

-- 87. Select orders where customer is 'John Doe'
SELECT * FROM orders 
WHERE customer_id = (SELECT customer_id FROM customers WHERE name = 'John Doe');

-- 88. Use EXISTS to find customers who have placed at least one order
SELECT * FROM customers 
WHERE EXISTS (SELECT 1 FROM orders WHERE orders.customer_id = customers.customer_id);

-- 89. Use NOT EXISTS to find customers who have not placed any orders
SELECT * FROM customers 
WHERE NOT EXISTS (SELECT 1 FROM orders WHERE orders.customer_id = customers.customer_id);

-- 90. Find the highest total price in the orders table
SELECT MAX(total) FROM orders;

-- 91. Find customers who have the same phone number
SELECT phone, COUNT(*) 
FROM customers
GROUP BY phone
HAVING COUNT(*) > 1;

-- 92. Find all products with 'wireless' in the description
SELECT * FROM products WHERE description LIKE '%wireless%';

-- 93. List customers and their most expensive purchased product
SELECT customers.name, MAX(order_items.price) AS max_price
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id
GROUP BY customers.customer_id;

-- 94. Select customers and their last order date
SELECT customers.name, MAX(orders.order_date) AS last_order_date
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;

-- 95. Find the most recent order for each customer
SELECT customers.name, MAX(orders.order_date) AS last_order_date
FROM customers
JOIN orders ON customers.customer_id = orders.customer_id
GROUP BY customers.customer_id;

-- 96. Select orders placed after a specific date
SELECT * FROM orders WHERE order_date > '2023-09-01';

-- 97. Get the total number of products in each order
SELECT order_id, COUNT(*) AS total_products FROM order_items GROUP BY order_id;

-- 98. Select customers who ordered a specific product (e.g., Product ID 1)
SELECT customers.name 
FROM customers 
JOIN orders ON customers.customer_id = orders.customer_id
JOIN order_items ON orders.order_id = order_items.order_id 
WHERE order_items.product_id = 1;

-- 99. Create an index on products for quick search by category
CREATE INDEX idx_category ON products (category);

-- 100. Drop the index created on products
DROP INDEX idx_category ON products;
